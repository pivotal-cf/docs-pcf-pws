---
title: Using the App Autoscaler CLI
owner: PCF Autoscaler
---

This topic explains how to use the App Autoscaler Command-Line Interface (CLI).


## <a id='overview'></a> Overview of the App Autoscaler CLI

The App Autoscaler CLI is an extension of the Cloud Foundry Command-Line Interface (cf CLI) that allows you to configure and control Autoscaler from your
local command line.

<p class='note'><strong>Note:</strong> The return output from the App Autoscaler CLI may include odd characters in Windows shells that do not support text
  color. To prevent this error, run <code>SET CF_COLOR=false</code> in your Windows shell pane before you use the App Autoscaler CLI. Some Windows shells do not support the <code>CF_COLOR</code> environment variable.</p>


## <a id='install'></a> Install the App Autoscaler CLI Plugin

Before you can run App Autoscaler CLI commands, you must install the App Autoscaler CLI Plugin.

To install the plug-in:

1. Download the [VMware Tanzu App Autoscaler CLI Plugin](https://network.pivotal.io/products/pcf-app-autoscaler) from <%= vars.product_network %>.
  <p class='note'><strong>Note:</strong> There are two versions of the App Autoscaler CLI. If you install the wrong version, you cannot use it with the
    Autoscaler instance in your <%= vars.app_runtime_abbr %> deployment. For more information, see <a href="troubleshooting.html#oss-autoscaler">App
    Autoscaler for Cloud Foundry Does Not Work with <%= vars.app_runtime_abbr %></a> in <em>Troubleshooting App Autoscaler</em>.</p>

1. In a terminal window, run:

    ```
    cf install-plugin LOCATION-OF-PLUGIN
    ```
    Where `LOCATION-OF-PLUGIN` is the path to the binary file you downloaded from <%= vars.product_network %>. For example:

    ```
    cf install-plugin ~/Downloads/autoscaler-for-pcf-cliplugin-macosx64-binary-2.0.91
    ```
    For more information about installing cf CLI plug ins, see [Install a Plugin](../../cf-cli/use-cli-plugins.html#plugin-install) in _Using cf CLI Plugins_.


## <a id='create-and-bind'></a> Create and Bind an Autoscaler Service Instance

Before you can use Autoscaler, you must create a service instance of Autoscaler and bind it to your app. For more information about service instances, see
[Managing Service Instances with the cf CLI](../../devguide/services/managing-services.html).

To create and bind an Autoscaler service instance:

1. In a terminal window, target the space in which the app you want to scale is deployed by running:

    ```
    cf target -o ORG-NAME -s SPACE-NAME
    ```

    Where:
    <ul>
      <li><code>ORG-NAME</code> is the name of the org containing the space in which the app you want to scale is deployed.</li>
      <li><code>SPACE-NAME</code> is the name of the space in which the app you want to scale is deployed.</li>
    </ul>

1. Create an Autoscaler service instance by running:

    ```
    cf create-service app-autoscaler PLAN-NAME SERVICE-NAME
    ```

    Where:
    <ul>
      <li><code>PLAN-NAME</code> is the name of the service plan you want to use for the Autoscaler service instance.</li>
      <li><code>SERVICE-INSTANCE-NAME</code> is the name you want to give the Autoscaler service instance. For example, <code>autoscaler</code>.</li>
    </ul>

1. Bind the Autoscaler service instance you created in the previous step to the app you want to scale by running:

    ```
    cf bind-service APP-NAME SERVICE-INSTANCE-NAME
    ```

    Where:
    <ul>
      <li><code>APP-NAME</code> is the name of the app you want to scale.</li>
      <li><code>SERVICE-INSTANCE-NAME</code> is the name of the Autoscaler service instance in the previous step.</li>
    </ul>

<p class='note'><strong>Note:</strong> Only one service instance of Autoscaler can exist in each space in an org. If you try to create more than one
  Autoscaler service instance in a space, the App Autoscaler CLI returns an error message. For more information, see
  <a href="troubleshooting.html#one-instance-per-space">One Autoscaler Service Instance Allowed Per Space</a> in <em>Troubleshooting App Autoscaler</em>.</p>


## <a id='view-apps'></a> View Apps Bound to Autoscaler

To view a list of all the apps that are bound to an Autoscaler service instance in a space:

1. In a terminal window, target the space in which you want to view apps bound to an Autoscaler service instance by running:

    ```
    cf target -o ORG-NAME -s SPACE-NAME
    ```

    Where:
    <ul>
      <li><code>ORG-NAME</code> is the name of the org containing the space in which the apps you want to view are deployed.</li>
      <li><code>SPACE-NAME</code> is the name of the space in which the apps you want to view are deployed.</li>
    </ul>

1. Run:

    ```
    cf autoscaling-apps
    ```
    The above command returns a list of apps that are bound to Autoscaler, whether autoscaling is configured for those apps, and the autoscaling limits and
    scaling factors that are configured for them, similar to the following example:
    <pre class="terminal">
    Presenting autoscaler apps in org example-org / space example-space as user
    Name                  Guid                                      Enabled   Min Instances   Max Instances   Scale Up Factor   Scale Down Factor
    example-app              d0077dc5-34bd-42c7-b377-e0fcb14d67f3      true      1               4               1                 1
    example-app-2            3f8c6e84-0b6e-4ec9-9335-0aad3979d672      false     10              40              5                 2
    OK
    </pre>


## <a id='allow-autoscaling'></a> Allow Autoscaling

To allow autoscaling for an app:

1. Run:

    ```
    cf enable-autoscaling APP-NAME
    ```
    Where `APP-NAME` is the name of the app for which you want to allow autoscaling.
    <br>
    <br>
    For example, running the following command allows Autoscaler to scale `example-app`:

    ```
    cf enable-autoscaling example-app
    ```
    The above command returns output similar to the following example:
    <pre class="terminal">
    Enabled autoscaling for app example-app for org example-org / space example-space as user
    OK
    </pre>

<p class='note'><strong>Note:</strong> By default, the upper and lower autoscaling limits for an app are <code>-1</code>. Before Autoscaler can scale an app,
  you must update these upper and lower autoscaling limits. For more information, see <a href="#configure-autoscaling-limits">Configure Autoscaling Limits</.</p>


## <a id='disallow-autoscaling'></a> Disallow Autoscaling

To disallow autoscaling for an app:

1. Run:

    ```
    cf disable-autoscaling APP-NAME
    ```
    Where `APP-NAME` is the name of the app for which you want to disallow autoscaling.
    <br>
    <br>
    For example, running the following command disallows Autoscaler from scaling `example-app`:

    ```
    cf disable-autoscaling example-app
    ```
    The above command returns output similar to the following example:
    <pre class="terminal">
    Disabled autoscaling for app example-app for org example-org / space example-space as user
    OK
    </pre>


## <a id='configure-autoscaling-limits'></a> Configure Autoscaling Limits

To configure the upper and lower autoscaling limits for an app:

1. In a terminal window, run:

    ```
    cf update-autoscaling-limits APP-NAME LOWER-SCALING-LIMIT UPPER-SCALING-LIMIT
    ```

    Where:
    <ul>
      <li><code>APP-NAME</code> is the name of the app for which you want to configure autoscaling limits.</li>
      <li><code>LOWER-SCALING-LIMIT</code> is the minimum number of instances you want Autoscaler to create for the app.</li>
      <li><code>UPPER-SCALING-LIMIT</code> is the maximum number of instances you want Autoscaler to create for the app.</li>
    </ul>

    For example, running the following command sets the lower scaling limit for `example-app` to `20` and the upper scaling limit to `100`:

    ```
    cf update-autoscaling-limits example-app 20 100
    ```
    The above command returns output similar to the following example:
    <pre class="terminal">
    Updated autoscaling instance limits for app example-app for org example-org / space example-space as user
    OK
    </pre>

For more information about autoscaling limits, see [Autoscaling Limits](productionizing-autoscaler.html#autoscaling-limits) in _Using App Autoscaler in
Production_.


## <a id='configure-scaling-factors'></a> Configure Scaling Factors

To configure scaling factors for an app:

1. In a terminal window, run:

    ```
    cf update-autoscaling-factors APP-NAME SCALE-UP-FACTOR SCALE-DOWN-FACTOR
    ```

    Where:
    <ul>
      <li><code>APP-NAME</code> is the name of the app for which you want to configure scaling factors.</li>
      <li><code>SCALE-UP-FACTOR</code> is the number of app instances by which you want Autoscaler to scale up at a time.</li>
      <li><code>SCALE-DOWN-FACTOR</code> is the number of app instances by which you want Autoscaler to scale down at a time.</li>
    </ul>

    For example, running the following command configures Autoscaler to scale `example-app` up by 20 instances at a time and down by 10 instances at a time:

    ```
    cf update-autoscaling-factors example-app 20 10
    ```
    The above command returns output similar to the following example:
    <pre class="terminal">
    Updated autoscaling factors for app hello-app in org example-org / space example-space as user
    OK
    </pre>

For more information about scaling factors, see [Scaling Factors](productionizing-autoscaler.html#scaling-factors) in _Using App Autoscaler in Production_.


## <a id='autoscaling-rules'></a> Autoscaling Rules and Scaling Metrics

To configure autoscaling rules for Autoscaler to use when making scaling decisions for an app, see the sections below:

* [View All Autoscaling Rules](#view-rules)

* [Create an Autoscaling Rule](#create-rule)

* [Delete an Autoscaling Rule](#delete-rule)

* [Delete All Autoscaling Rules](#delete-all-rules)

For more information about scaling metrics for which you can configure autoscaling rules, see [Scaling
Metrics](productionizing-autoscaler.html#scaling-metrics) in _Using App Autoscaler in Production_.

For more information about the scaling metrics you can use when defining autoscaling rules for Autoscaler, see [Default Metrics for Scaling
Rules](about-app-autoscaler.html#default-metrics) and [Custom Metrics for Scaling Rules](about-app-autoscaler.html#custom-metrics) in _About App Autoscaler_.

### <a id='view-rules'></a> View All Autoscaling Rules

To view all autoscaling rules that are configured for an app:

1. Run:

    ```
    cf autoscaling-rules APP-NAME
    ```
    Where `APP-NAME` is the name of the app for which you want to view all autoscaling rules.
    <br>
    <br>
    For example, running the following command returns a list of all autoscaling rules that are configured for `example-app`:

    ```
    cf autoscaling-rules example-app
    ```
    The above command returns output similar to the following example:
    <pre class="terminal">
    Presenting autoscaler rules for app example-app for org example-org / space example-space as user
    Guid                                    Type             Metric   Sub Type   Service Instance   Min Threshold   Max Threshold
    45870b7f-f5c9-403f-9150-e79314f62f06    cpu                                                     10              20
    10a581c5-8fb4-48a2-b4de-8bc834aac146    http_throughput                                         20              30
    OK
    </pre>

### <a id='create-rule'></a> Create an Autoscaling Rule

To create a new autoscaling rule for an app:

1. Run:

    ```
    cf create-autoscaling-rule APP-NAME RULE-TYPE MINIMUM-THRESHOLD MAXIMUM-THRESHOLD --subtype SUBTYPE --metric METRIC-NAME --comparison-metric COMPARISON-METRIC-NAME --rabbitmq-instance SERVICE-INSTANCE-NAME
    ```

    Where:
    <ul>
    <li><code>APP-NAME</code> is the name of the app for which you want to create an autoscaling rule.</li>
    <li><code>RULE-TYPE</code> is the rule type of the autoscaling rule you want to create. Valid values are <code>compare</code>, <code>CPU</code>, <code>custom</code>, <code>http_latency</code>, <code>http_throughput</code>, <code>memory</code>, or <code>rabbitmq</code>.
      <div class='note'><strong>Notes:</strong>
        <ul>
          <li><%= vars.company_name %> does not recommend using <code>http_throughput</code> as a scaling rule when logging volume is high in the system. For
            more information, see <a href="https://community.pivotal.io/s/article/http-throughput-based-autoscaling-rules-do-not-fire">HTTP throughput based
            Autoscaling rules do not fire</a> in the Knowledge Base.</li>
          <li><code>http_latency</code> threshold units are in milliseconds. In general, the value for <code>MAXIMUM-THRESHOLD</code> should be at least twice
            the value for <code>MINIMUM-THRESHOLD</code> to avoid excessive cycling. HTTP latency is calculated from the Gorouter to the app and back to the
            Gorouter. HTTP latency is not calculated between the user and the app.</li>
          <li>If you specify <code>http_latency</code> as the rule type, you must also specify a rule subtype using the <code>--subtype</code> or
            <code>-s</code> parameter.</li>
          <li>If you specify <code>compare</code> as the rule type, you must also specify a scaling metric using the <code>--metric</code> or <code>-m</code>
            parameter and a comparison metric using the <code>--comparison-metric</code> or <code>-c</code> parameter.</li>
          <li>If you specify <code>custom</code> as the rule type, you must also specify a scaling metric using the <code>--metric</code> or <code>-m</code>
            parameter.</li>
        </ul>
      </div>
    </li>
    <li><code>MINIMUM-THRESHOLD</code> is the minimum threshold for the scaling metric.</li>
    <li><code>MAXIMUM-THRESHOLD</code> is the maximum threshold for the scaling metric.</li>
    <li>(Optional) Include the <code>--subtype</code> or <code>-s</code> parameter to specify a rule subtype, where <code>SUBTYPE</code> is the rule subtype you want to specify. For an
    <code>http_latency</code> rule, valid values are <code>avg_99th</code> or <code>avg_95th</code>. For a <code>rabbitmq</code> rule, a valid value is the name of the RabbitMQ queue you want Autoscaler
    to monitor. This queue must be on a RabbitMQ service instance that is bound to the app you want to scale.</li>
    <li>(Optional) Include the <code>--metric</code> or <code>-m</code> parameter to specify a scaling metric for a <code>compare</code> or <code>custom</code> rule, where <code>METRIC-NAME</code> is the name of the
    scaling metric.</li>
    <li>(Optional) Include the <code>--comparison-metric</code> or <code>-</code>c parameter to specify a comparison metric for a <code>compare</code> rule, where <code>COMPARISON-METRIC-NAME</code> is
    the name of the metric you want to compare to the scaling metric.</li>
    <li>(Optional) Include the <code>--rabbitmq-instance</code> or <code>-r</code> parameter to specify a RabbitMQ service instance for a <code>rabbitmq</code> rule, where
    <code>SERVICE-INSTANCE-NAME</code> is the name of the RabbitMQ service instance you want Autoscaler to query. Defining this parameter ensures that Autoscaler does
    not unnecessarily query other RabbitMQ service instances that are bound to the app.</li>
    </ul>

For more information about configuring Autoscaler to use HTTP latency as the scaling metric for an app, see [Using HTTP Latency as a Scaling
Metric](http-latency.html).

For more information about configuring Autoscaler to use RabbitMQ queue depth as the scaling metric for an app, see [Using RabbitMQ Queue Depth as a Scaling
Metric](rabbit-mq.html).

For more information about configuring Autoscaler to use a custom scaling metric as the scaling metric for an app, see [Using Custom Scaling
Metrics](custom-metrics.html).

### <a id='delete-rule'></a> Delete an Autoscaling Rule

To delete an autoscaling rule for an app:

1. View all autoscaling rules for the app for which you want to delete an autoscaling rule by following the procedure in [View All Autoscaling
Rules](#view-rules) above.

1. From the `Guid` column of the terminal output, record the global unique identifier (GUID) of the autoscaling rule you want to delete.

1. Run:

    ```
    cf delete-autoscaling-rule APP-NAME RULE-GUID
    ```

    Where:
    <ul>
      <li><code>APP-NAME</code> is the name of the app for which you want to delete an autoscaling rule.</li>
      <li><code>RULE-GUID</code> is the GUID of the autoscaling rule you want to delete.</li>
    </ul>

    For example, running the following command deletes the autoscaling rule with a GUID of `10a581c5-8fb4-48a2-b4de-8bc834aac146` for `example-app`:

    ```
    cf delete-autoscaling-rule example-app 10a581c5-8fb4-48a2-b4de-8bc834aac146
    ```

1. When prompted, enter `y` to delete the autoscaling rule.

### <a id='delete-all-rules'></a> Delete All Autoscaling Rules

To delete all autoscaling rules for an app:

1. Run:

    ```
    cf delete-autoscaling-rules APP-NAME
    ```
    Where `APP-NAME` is the name of the app for which you want to delete all autoscaling rules.
    <br>
    <br>
    For example, running the following command deletes all autoscaling rules for `example-app`:

    ```
    cf delete-autoscaling-rules example-app
    ```

1. When prompted, enter `y` to delete all autoscaling rules for the app.


## <a id='autoscaling-events'></a> View Autoscaling Events

To view a list of autoscaling events that Autoscaler has recorded for an app:

1. Run:

    ```
    cf autoscaling-events APP-NAME
    ```
    Where `APP-NAME` is the name of your app.
    <br>
    <br>
    For example, running the following command returns a list of all recent autoscaling events that Autoscaler has recorded for `example-app`:

    ```
    cf autoscaling-events example-app
    ```
    The above command returns output similar to the following example:
    <pre class="terminal">
    Time                  Description
    2032-01-01T00:00:00Z  Scaled up from 3 to 4 instances. Current cpu of 20 is above upper threshold of 10.
    </pre>


## <a id='scheduled-limit-changes'></a> Scheduled Limit Changes

To configure scheduled limit changes for Autoscaler, see the sections below:

* [View All Scheduled Limit Changes](#view-slcs)

* [Create a Scheduled Limit Change](#create-slc)

* [Delete a Scheduled Limit Change](#delete-slc)

For more information about scheduled limit changes, see [Scheduled Limit Changes](scheduled-limit-changes.html).

### <a id='view-slcs'></a> View All Scheduled Limit Changes

To view all scheduled limit changes for an app:

1. Run:

    ```
    cf autoscaling-slcs APP-NAME
    ```
    Where `APP-NAME` is the name of the app for which you want to view all scheduled limit changes.
    <br>
    <br>
    For example, running the following returns a list of all scheduled limit changes configured for `example-app`:

    ```
    cf autoscaling-slcs example-app
    ```
    The above command returns output similar to the following example:
    <pre class="terminal">
    Guid                                      First Execution        Min Instances   Max Instances   Recurrence
    f08f9803-6e5d-4519-abc3-fea640300d01      2018-06-12T22:00:00Z   0               1               Mo,Tu,We,Th,Fr
    </pre>

### <a id='create-slc'></a> Create a Scheduled Limit Change

To create a scheduled limit change for an app:

1. Run:

    ```
    cf create-autoscaling-slc APP-NAME TIME LOWER-SCALING-LIMIT UPPER-SCALING-LIMIT --recurrence DAY-1,DAY-2,DAY-3
    ```

    Where:
    <ul>
      <li><code>APP-NAME</code> is the name of the app.</li>
      <li><code>TIME</code> is the time, in UTC timestamp format, at which you want Autoscaler to apply the scheduled limit change. For example, <code>2032-01-01T20:00:00Z</code>.
        <div class='note'><strong>Notes:</strong>
          <ul>
            <li>You can only configure times for scheduled limit changes in UTC time.</li>
            <li>If the value that you configure for <code>TIME</code> is your local time converted to UTC time, and Daylight Saving Time is observed in your
              time zone, the UTC offset for your time zone may change during the year.</li>
          </ul>
        </div>
      </li>
      <li><code>LOWER-SCALING-LIMIT</code> is the minimum number of instances you want Autoscaler to create for the app during the scheduled limit change. If the current
      number of app instances is fewer than this number at the time of the scheduled limit change, Autoscaler scales the number of app instances up to this
      number.</li>
      <li><code>UPPER-SCALING-LIMIT</code> is the maximum number of instances you want Autoscaler to create for the app during the scheduled limit change. If the current
      number of app instances is greater than this number at the time of the scheduled limit change, Autoscaler scales the number of app instances down to this
      number.</li>
      <li>(Optional) Include the <code>--recurrence</code> parameter to specify the days of the week on which you want Autoscaler to re-apply the scheduled limit change,
      where <code>DAY-1</code>, <code>DAY-2</code>, <code>DAY-3</code>, and so on are the days you want to specify. Valid values are <code>Mo</code>, <code>Tu</code>, <code>We</code>, <code>Th</code>, <code>Fr</code>, <code>Sa</code>, or <code>Su</code>. For example, if
      you want Autoscaler to re-apply the scheduled limit change on Monday, Wednesday, Friday, and Saturday, include <code>--recurrence Mo,We,Fr,Sa</code> in the above
      command.</li>
    </ul>

    For example, running the following command configures Autoscaler to create a minimum of one instance and a maximum of two instances of `example-app` for
    the first time at 2018-06-14T15:00:00Z UTC and the same time every Saturday afterward:

    ```
    cf create-autoscaling-slc example-app 2018-06-14T15:00:00Z 1 2 --recurrence Sa
    ```
    The above command returns output similar to the following example:
    <pre class="terminal">
    Created scheduled autoscaler instance limit change for app example-app in org example-org / space example-space as user
    OK
    Guid                                      First Execution        Min Instances   Max Instances   Recurrence
    7a19a8a2-e435-4c67-b038-cc4add8be686      2018-06-14T15:00:00Z   1               2               Sa
    </pre>

### <a id='delete-slc'></a> Delete a Scheduled Limit Change

To delete a scheduled limit change for an app:

1. View all scheduled limit changes for the app for which you want to delete a scheduled limit change by following the procedure in [View All Scheduled Limit
Changes](#view-slcs) above.

1. From the `Guid` column of the terminal output, record the GUID of the scheduled limit change you want to delete.

1. Run:

    ```
    cf delete-autoscaling-slc APP-NAME SLC-GUID [--force]
    ```
    Where:
    <ul>
      <li><code>APP-NAME</code> is the name of the app for which you want to delete a scheduled limit change.</li>
      <li><code>SLC-GUID</code> is the GUID of the scheduled instance limit change that you recorded in the previous step.</li>
    </ul>

    For example, running the following command deletes the scheduled limit change with a GUID of `d0077dc5-34bd-42c7-b377-e0fcb14d67f3` for `example-app`:

    ```
    cf delete-autoscaling-slc example-app d0077dc5-34bd-42c7-b377-e0fcb14d67f3
    ```

1. When prompted, enter `y` to delete the scheduled limit change.


## <a id='configure-autoscaling'></a> Configure Autoscaler Using a Manifest File

You can configure autoscaling rules, scaling limits, and scheduled limit changes for Autoscaler declaratively through a manifest file. This manifest file only
configures Autoscaler, and does not interfere with any other existing app manifest files in your <%= vars.app_runtime_abbr %> deployment.

To configure Autoscaler using a manifest file:

1. Create a YAML file that includes the following configuration parameters:

    ```
    ---
    instance_limits:
      min: LOWER-SCALING-LIMIT
      max: UPPER-SCALING-LIMIT
    rules:
    - rule_type: RULE-TYPE
      threshold:
        min: MINIMUM-METRIC-THRESHOLD
        max: MAXIMUM-METRIC-THRESHOLD
    scheduled_limit_changes:
    - recurrence: RECURRENCE
      executes_at: "TIME"
      instance_limits:
        min: SCHEDULED-LOWER-SCALING-LIMIT
        max: SCHEDULED-UPPER-SCALING-LIMIT
    ```

    Where:
    <ul>
      <li><code>LOWER-SCALING-LIMIT</code> is the minimum number of instances that you want Autoscaler to create for the app by default.</li>
      <li><code>UPPER-SCALING-LIMIT</code> is the maximum number of instances that you want Autoscaler to create for the app by default.</li>
      <li>(Optional) If you include a <code>rules</code> block:
        <ul>
          <li><code>RULE-TYPE</code> is the type of autoscaling rule you want Autoscaler to use for autoscaling decisions. For more information about configuring autoscaling
          rules using a manifest file, see <a href="http-latency.html">Using HTTP Latency as a Scaling Metric</a>, <a href="rabbit-mq.html">Using RabbitMQ Queue Depth as a Scaling
          Metric</a>, and <a href="custom-metrics.html">Using Custom Scaling Metrics</a>.</li>
        </ul>
      </li>
      <li><code>MINIMUM-METRIC-THRESHOLD</code> is the minimum scaling metric threshold. If the average value of the scaling metric falls below this number, Autoscaler
      scales the number of app instances down.</li>
      <li><code>MAXIMUM-METRIC-THRESHOLD</code> is the maximum custom scaling metric threshold. If the average custom scaling metric rises above this number, Autoscaler
      scales the number of app instances up.</li>
      <li>(Optional) If you include a <code>scheduled_limit_changes</code> block:
        <ul>
          <li><code>RECURRENCE</code> is the calculated value of the bitmasked days of the week on which you want Autoscaler to re-apply the scheduled limit change. For more
          information, see <a href="scheduled-limit-changes.html#recurrence-value">Calculating a Recurrence Schedule Value</a> in <em>Scheduled Limit Changes</em>.</li>
          <li>
            <code>TIME</code> is the time, in UTC timestamp format, at which you want Autoscaler to apply the scheduled limit change. For example, <code>2032-01-01T20:00:00Z</code>.
            <p class='note'>
              <strong>Note:</strong> If the value that you configure for <code>TIME</code> is your local time converted to UTC time, and Daylight
              Saving Time is observed in your time zone, the UTC offset for your time zone may change during the year.
            </p>
          </li>
          <li><code>SCHEDULED-LOWER-SCALING-LIMIT</code> is the minimum number of instances you want Autoscaler to create for the app during the scheduled limit change. If the
          current number of app instances is fewer than this number at the time of the scheduled limit change, Autoscaler scales the number of app instances up to
          this number.</li>
          <li><code>SCHEDULED-UPPER-SCALING-LIMIT</code> is the maximum number of instances you want Autoscaler to create for the app during the scheduled limit change. If the
          current number of app instances is greater than this number at the time of the scheduled limit change, Autoscaler scales the number of app instances
          down to this number.</li>
        </ul>
      </li>
    </ul>

    You must include both a `rules` block and a `scheduled_limit_changes` block must be present in your Autoscaler manifest. If you do not want to configure
    autoscaling rules for an app, include an empty `rules` block. If you do not want to configure scheduled limit changes for an app, include an empty
    `scheduled-limit-changes` block.

1. Apply the manifest file you configured in the previous step to the app you want to scale by running:

    ```
    cf configure-autoscaling APP-NAME MANIFEST-FILENAME
    ```

    Where:
    <ul>
      <li><code>APP-NAME</code> is the name of the app.</li>
      <li><code>MANIFEST-FILENAME</code> is the filename of the manifest file you created in the previous step. For example, <code>autoscaler.yml</code>.</li>
    </ul>

    For example, running the following command applies the `autoscaler.yml` manifest file to `example-app`:

    ```
    cf configure-autoscaling example-app autoscaler-manifest.yml
    ```
    The above command returns output similar to the following example:
    <pre class="terminal">
    Setting autoscaler settings for app example-app for org example-org / space example-space as user
    OK
    </pre>
