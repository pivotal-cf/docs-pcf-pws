---
title: Tutorial Scaling a Spring App on a Custom App Metric
owner: Autoscaler
---

You can scale an app with Autoscaler in your <%= vars.app_runtime_abbr %> deployment based on a Custom App Metric.

In a <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) deployment, Autoscaler can scale apps based on Custom App Metrics.
The table describes the main components involved in this workflow and how they correspond to steps in this tutorial.

<table class="table">
<thead>
	<tr>
		<th>Component</th>
		<th>Description</th>
		<th style="width: 33%">Related Tutorial Steps</th>
	</tr>
	</thead>
	<tr>
		<td>App</td>
		<td>The app must emit Custom App Metrics by exposing a Prometheus endpoint. This tutorial includes a sample Spring app, <code>java-spring-security</code>, that emits such metrics. For more information about Prometheus, see the <a href="https://prometheus.io/docs/introduction/overview/#what-is-prometheus">Prometheus documentation</a>.</td>
		<td><a href="#review">Review the sample spp</a> and <a href="#push">Push the sample app</a></td>
	</tr>
	<tr>
		<td>Metric Registrar</td>
		<td>The Metric Registrar is a component of <%= vars.app_runtime_abbr %> you can export custom app metrics to Loggregator. You issue commands to the Metric Registrar through the Metric Registrar CLI plug-in. For more information about the Metric Registrar, see <a href="../../metric-registrar/index.html">Metric registrar and custom app metrics</a>.</td>
		<td><a href="#register-endpoint">Register a Custom App Metrics endpoint</a></td>
	</tr>
	<tr>
		<td>App Autoscaler</td>
		<td>Autoscaler is a service integrated with Apps Manager that scales apps in your <%= vars.app_runtime_abbr %> deployment based on the scaling metrics or schedule that you configure. For more information, see <a href="../autoscaler/using-autoscaler.html">Scaling an app using App Autoscaler</a>.</td>
		<td><a href="#create-rules">Create an autoscaling rule</a> and <a href="#trigger">Trigger scaling</a></td>
	</tr>
</table>


## <a id="prerequisites"></a> Prerequisites

This tutorial requires:

* A <%= vars.app_runtime_abbr %> deployment in which the Metric Registrar is activated. To configure the Metric Registrar, see [Configure the Metric Registrar](../../metric-registrar/index.html#configure) in _Metric Registrar and Custom App Metrics_.

* Access to Apps Manager in the <%= vars.app_runtime_abbr %> deployment.<% if vars.platform_code != 'OFFLINE' %> To access Apps Manager, see [Logging in to Apps Manager](../../operating/console-login.html).<% end %>

* The ability to push an app to the <%= vars.app_runtime_abbr %> deployment. For more information, see [Prerequisites](../../devguide/deploy-apps/deploy-app.html#prepare) in _Pushing an App_ and [Manage users and roles](../../cf-cli/getting-started.html#managing-roles) in _Getting Started with the cf CLI_.

  <p class="note important">
  <span class="note__title">Important</span>
  You must have <code>SpaceDeveloper</code> permissions in at least one space.
  </p>

* The Cloud Foundry Command-Line Interface (cf CLI). To install the cf CLI, see [Installing the cf CLI](../../cf-cli/index.html)
* A Java 17 JRE
* Access to a command-line for running commands such as cf CLI and GIT commands

## <a id="review"></a> Review the sample app

To review the code for the sample app, `java-spring-security`, see the [metric-registrar-examples](https://github.com/pivotal-cf/metric-registrar-examples/) repository on GitHub. This sample app is a Spring app with a user interface (UI) that includes several buttons to call different endpoints. Some of these endpoints are instrumented to produce metrics.

You can see what the UI looks like in [Push the sample app](#sample-app-ui). The following sections provide some details about the code.

### <a id="dependencies"></a> Dependencies

You can view the app dependencies in the [build.gradle](https://github.com/pivotal-cf/metric-registrar-examples/blob/master/java-spring-security/build.gradle) file.

The dependencies include [Micrometer Prometheus](https://micrometer.io/docs/registry/prometheus), which creates a prometheus metrics endpoint at `/actuator/prometheus` that can be scraped by Metric Registrar.

### <a id="instrumentation"></a> Instrumentation

This section describes how the app is instrumented. Instrumentation refers to how metrics were added for a particular function.

See the [ExampleController.java](https://github.com/pivotal-cf/metric-registrar-examples/blob/master/java-spring-security/src/main/java/io/pivotal/metric_registrar/examples/spring_security/ExampleController.java) file from the sample app code:

* The `ExampleController` class includes a `MeterRegistry` object, which is passed and set in the constructor.

	```
	private MeterRegistry registry;
	private AtomicLong custom;

	public ExampleController(MeterRegistry registry) {
	   this.registry = registry;
	   this.custom = new AtomicLong(0L);
	}
	```

* It also includes a `custom` variable that is initialized in the constructor. In the [customMetric](https://github.com/pivotal-cf/metric-registrar-examples/blob/master/java-spring-security/src/main/java/io/pivotal/metric_registrar/examples/spring_security/ExampleController.java#L29) handler, this variable gets passed to the registry and incremented or decremented.

	```
	public ResponseEntity<String> customMetric(@RequestParam(value="inc", defaultValue="") String increment) {
        AtomicLong customGauge = registry.gauge("custom", this.custom);
        if (!"".equals(increment)) {
            customGauge.incrementAndGet();
        } else {
            customGauge.decrementAndGet();
        }
	```
The App Autoscaler only scales on a gauge, or metric, that can go up and down. The standard metrics of CPU Entitlement Utilization, Container Memory Utilization, HTTP Request Throughput, and HTTP Request Latency are all gauges.


## <a id="push"></a> Push the sample app

To push the sample app:

1. Open a terminal window and clone the git repository that contains the sample app:

	```
	git clone https://github.com/pivotal-cf/metric-registrar-examples.git
	```

1. Navigate to the `java-spring-security` app directory:

	```
	cd metric-registrar-examples/java-spring-security
	```

1. Build the app by running:

	```
	./gradlew build
	```

1. Push the app with a random route:

    ```console
    cf push java-spring-security --random-route
    ```

    The previous command returns output similar to this example:
    <pre class="terminal">
    Waiting for app to start...
    Uploaded droplet (60.5M)
    Uploading complete
    Cell 333e7fdf-806e-424d-b3a0-78967ecb6d28 stopping instance 6f345835-8beb-48a5-b578-921f5de442c6

    name:              java-spring-security
    requested state:   started
    routes:            java-spring-security-random-route.cfapps.io
    last uploaded:     Wed 28 Aug 11:02:33 PDT 2019
    </pre>

1. From the `routes` section of the terminal output, record the URL of the `java-spring-security` app. In the example output earlier in the procedure, this URL is `tutorial-example-random-route.cfapps.io`.

1. In a browser, navigate to the app URL you recorded in a previous step.

![alt-text=""](./images/sample-app-ui.png)

  The screen has the following buttons:

  * **Increment Custom gauge:** Causes the `custom` metric to increase by a value of `1`. You use this button in [Trigger scaling](#trigger).
  * **Decrement custom gauge:** Causes the `custom` metric to decrease by a value of `1`
  * **See the metrics:** Opens `/actuator/prometheus` in your browser. The Metric Registrar uses this page to collect metrics. You can view the values of the `custom` metric and all metrics from the Micrometer Prometheus library.
  * **Increment Simple counter** and **Call an endpoint with high latency:** These buttons are not used in this tutorial. To learn about these functions, see [java-spring-security](https://github.com/pivotal-cf/metric-registrar-examples/tree/master/java-spring-security) on GitHub.


## <a id="register-endpoint"></a> Register a Custom App Metrics endpoint

When you want to your app to emit Custom App Metrics, you register the app as a metric source with the Metric Registrar.

To register a Custom App Metrics endpoint for the app:

1. Install the Metric Registrar CLI:

	```
	cf install-plugin -r CF-Community "metric-registrar"
	```

1. Register the metrics endpoint of the `java-spring-security` app by running:

    ```
    cf register-metrics-endpoint java-spring-security /actuator/prometheus --insecure
    ```
    Because the app dependencies include the Micrometer Prometheus library, there is a metrics endpoint at `/actuator/prometheus`.

    <p class="note caution">
    <span class="note__title">Caution</span> When you include the <code>--insecure</code> flag in the above command, the Metric Registrar scrapes the metrics endpoint on the default app port. Exposing metrics on the default app port makes the metrics available to anyone with access to the app. VMware recommends that you do not use the <code>--insecure</code> flag in a production environment. Instead, specify an alternative port by including the <code>--internal-port</code> flag. Specifying an alternative port the <code>--internal-port</code> flag exposes the metrics endpoint on that port and limits access to the app.</p>


1. Install the Log Cache CLI by running:

    ```
    cf install-plugin -r CF-Community "log-cache"
    ```
    Log Cache is a component of <%= vars.app_runtime_abbr %> that caches logs and metrics from across the platform.

1. View the app metrics as they are emitted running this command. The `--follow` flag appends output as metrics are emitted.

	```
	cf tail java-spring-security --envelope-class metrics --follow
	```

	The output looks similar to the following example. The `custom` metric displays in the output.

	<pre class="terminal">
	Retrieving logs for app  in org sandbox / space development as example@user...

	2019-08-28T09:17:56.28-0700 [tutorial-example/1] GAUGE cpu:0.289158 percentage disk:135716864.000000 bytes disk_quota:1073741824.000000 bytes memory:399979315.000000 bytes memory_quota:2147483648.000000 bytes
	2019-08-28T09:17:56.50-0700 [tutorial-example/0] GAUGE custom:1.000000
	</pre>

    * In the <code>java-spring-security</code> app UI, you must click <strong>Increment Custom gauge</strong> at least one time to cause the app to emit the <code>custom</code> metric.
    * If you do not see output similar to the previous example, the Metric Registrar might not exist in your <%= vars.app_runtime_abbr %> deployment. To verify this, consult the operator of your <%= vars.app_runtime_abbr %> deployment.</li>


## <a id="create-rules"></a> Create an autoscaling rule

Autoscaler is integrated with Apps Manager. You can create autoscaling rules in Apps Manager.

To create an autoscaling rule for the `java-spring-security` app that uses the `custom` metric as its scaling metric:

1. Log in to Apps Manager.<% if vars.platform_code != 'OFFLINE' %> For more information, see [Logging in to Apps Manager](../../operating/console-login.html).<% end %>

1. In Apps Manager, go to the `java-spring-security` app overview. For more information, see [View app overview](../../console/manage-apps.html#view) in _Managing Apps and Service Instances Using Apps Manager_.

1. Click **Autoscaling Deactivated**.

![The app page for an app named java-metric-registrar-demo shows the Autoscaling Deactivated button being clicked.](./images/enable-autoscaling.png)

1. Click **Activate Autoscaling**.

2. Under **Instance Limits and Scaling**, configure upper and lower scaling limits for the `java-spring-security` app:
	1. For **Minimum**, enter `1`.
	1. For **Maximum**, enter `5`.
	1. Click **Apply Changes**.

		![The Manage Autoscaling form includes an Instance Limits and Scaling section. This section includes two text boxes, one for Minimum and one for Maximum. 1 is entered for Minimum and 5 is entered for Maximum.](./images/instance-limits.png)

3. To create an autoscaling rule:
	1. Next to **Scaling Rules**, click **Add Rule**. The **Add Rule** window appears.
	1. From the **Rule Type** options, select **Custom App Metric**.
	1. Click **Next**. More configuration text boxes appear.
	1. For **Scale down if less than**, enter `2`. If the average value of the `custom` metric falls below this number, Autoscaler scales the number of app instances down.
	1. For **Scale up if more than**, enter `5`. If the average value of the `custom` metric rises above this number, Autoscaler scales the number of app instances up.
	1. For **Metric**, enter `custom`.
	1. Click **Save**.

![The Add Rule form. The rule type is Custom App Metric. The thresholds are 2 and 5. The metric input is custom.](./images/add-rule.png)

## <a id="trigger"></a> Trigger scaling

Now that you pushed an app that emits a Custom App Metric and configured autoscaling rules, you can trigger a scaling action. App Autoscaler scales the app when the Custom App Metric goes above or below the threshold specified in the scaling rule.

To trigger scaling:

1. Navigate to the web UI of the app. Use the same URL from [Push the sample app](#push).

1. Click **Increment Custom gauge** enough times to bring the Custom App Metric over the threshold of `5` that you set in the scaling rule. You can see the value of the `custom` metric using the **See Metrics** button.

1. Monitor the app page in Apps Manager for about two minutes. App Autoscaler begins to scale the app. It adds one instance at a time until it reaches the **Maximum** instance limit of `5`.

## <a id="next-steps"></a> Next steps

Now that you have completed this tutorial, explore the app emitting Custom App Metrics and creating scaling rules with your own app. Review the resources listed in the Overview section to learn more. After you instrument your app to emit Custom App Metrics, you can follow the steps outlined in this tutorial to scale based on those metrics.
