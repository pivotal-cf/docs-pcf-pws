---
title: Tutorial&#58; Scaling a Spring App Using a Custom Scaling Metric
owner: Autoscaler
---

This tutorial describes how to configure App Autoscaler to scale a sample Spring app, `java-spring-security`, based on a custom scaling metric.


## <a id='overview'></a> Overview

In a <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) deployment, Autoscaler can automatically scale apps based on the custom scaling metrics you
configure.

The following table describes the main components involved in this workflow, as well as the steps in which you use them in this tutorial:

<table>
  <tr>
    <th>Component</th>
    <th>Description</th>
    <th style="width: 33%">Related Tutorial Steps</th>
  </tr>
  <tr>
    <td>App</td>
    <td>The app must emit custom scaling metrics that you create with Prometheus. This tutorial includes a sample Spring app,
      <code>java-spring-security</code>, that emits such metrics. For more information about Prometheus, see the
      <a href="https://prometheus.io/docs/introduction/overview/#what-is-prometheus">Prometheus documentation</a>.</td>
    <td><a href="#review">Review the Sample App</a> and <a href="#push">Push the Sample App</a></td>
  </tr>
  <tr>
    <td>Metric Registrar</td>
    <td>The Metric Registrar is a component of <%= vars.app_runtime_abbr %> that allows you to export custom app metrics to Loggregator. You issue commands to
      the Metric Registrar through the Metric Registrar CLI plug-in. For more information about the Metric Registrar, see
      <a href="../../metric-registrar/index.html">Metric Registrar and Custom App Metrics</a>. <% if vars.product_short == "PWS" %>For more information, see
      <a href="../../metric-registrar/index.html#overview">Overview</a> in <em>Configuring the Metric Registrar</em>.<% end %></td>
    <td><a href="#register-endpoint">Register a Custom Metrics Endpoint</a></td>
  </tr>
  <tr>
    <td>App Autoscaler</td>
    <td>Autoscaler is a service integrated with Apps Manager that automatically scales apps in your <%= vars.app_runtime_abbr %> deployment based on the
      scaling metrics or schedule that you configure. For more information, see <a href="../autoscaler/using-autoscaler.html">Scaling an App Using App
      Autoscaler</a>.</td>
    <td><a href="#create-rule">Create and Autoscaling Rule</a> and <a href="#trigger">Trigger Scaling</a></td>
  </tr>
</table>


## <a id='prerequisites'></a> Prerequisites

Before you begin this tutorial, ensure that you have the following prerequisites:

* A <%= vars.app_runtime_abbr %> deployment in which the Metric Registrar is activated. To configure the Metric Registrar, see [Configure the Metric
Registrar](../../metric-registrar/index.html#configure) in _Metric Registrar and Custom App Metrics_.

* Access to Apps Manager in the <%= vars.app_runtime_abbr %> deployment.<% if not vars.platform_code == 'OFFLINE' %> To access Apps Manager, see [Logging In
to Apps Manager](../../operating/console-login.html).<% end %>

* The ability to push an app to the <%= vars.app_runtime_abbr %> deployment. For more information, see
[Prerequisites](../../devguide/deploy-apps/deploy-app.html#prepare) in _Pushing an App_ and [Manage Users and
Roles](../../cf-cli/getting-started.html#managing-roles) in _Getting Started with the cf CLI_.
  <p class='note'><strong>Note:</strong> You must have <code>SpaceDeveloper</code> permissions in at least one space.</p>

* An installation of the Cloud Foundry Command-Line Interface (cf CLI). To install the cf CLI, see [Installing the cf CLI](../../cf-cli/index.html).

* A terminal.


## <a id='review'></a> Review the Sample App

To review the code for the sample app, `java-spring-security`, see the [metric-registrar-examples](https://github.com/pivotal-cf/metric-registrar-examples/)
repository on GitHub. This sample app is a Spring app with a simple user interface (UI) that includes several buttons to call different endpoints. Some of
these endpoints are instrumented to produce metrics.

For more details about the code, see the sections below:

* [Dependencies](#dependencies)

* [Instrumentation](#instrumentation)

### <a id='dependencies'></a> Dependencies

In the code for the `java-spring-security` app, the `build.gradle` file lists the following app dependencies:

```
dependencies {
    implementation('io.micrometer:micrometer-registry-prometheus')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
}
```

The above list includes the following dependencies:

* The Micrometer Prometheus library, which does the following:

  * Creates a metrics endpoint at `/actuator/prometheus` in a format that the Metric Registrar supports.

  * Allows you to instrument the `java-spring-security` app by creating new metrics. For more information, see [Instrumentation](#instrumentation) below.

* The Spring Security dependency, which exposes the metric endpoints so that Metric Registrar can access them.

To view the `build.gradle` file, see [build.gradle](https://github.com/pivotal-cf/metric-registrar-examples/blob/master/java-spring-security/build.gradle) on
GitHub.

For more information about the Micrometer Prometheus library, see the [Micrometer documentation](https://micrometer.io/docs/registry/prometheus).

### <a id='instrumentation'></a> Instrumentation

This section describes how the `java-spring-security` app is instrumented. _Instrumentation_ refers to code that is included in an app to measure performance.

In the code for the `java-spring-security` app, the `ExampleController.java` file includes the following parts:

* The following `MeterRegistry` object in the `ExampleController` class:

    ```
    private MeterRegistry registry;
    private AtomicLong custom;

    public ExampleController(MeterRegistry registry) {
       this.registry = registry;
       this.custom = new AtomicLong(0L);
    }
    ```
    The `MeterRegistry` object is passed and set in the constructor.

* A `custom` variable that is initialized in the constructor:

    ```
    public ResponseEntity<String> customMetric(@RequestParam(value="inc", defaultValue="") String increment) {
          AtomicLong customGauge = registry.gauge("custom", this.custom);
          if (!"".equals(increment)) {
              customGauge.incrementAndGet();
          } else {
              customGauge.decrementAndGet();
          }
    ```
    In the `customMetric` handler, the `custom` variable is passed to the registry and either incremented or decremented. For more information, see
    [customMetric](https://github.com/pivotal-cf/metric-registrar-examples/blob/master/java-spring-security/src/main/java/io/pivotal/metric_registrar/examples/spring_security/ExampleController.java#L29)
    on GitHub.
    <p class='note'><strong>Note:</strong> Autoscaler can only use gauge metrics, or metrics that can go up and down, as scaling metrics. Metrics such as CPU,
      disk, HTTP throughput, and HTTP latency are all gauge metrics.</p>

To view the `ExampleController.java` file, see
[ExampleController.java](https://github.com/pivotal-cf/metric-registrar-examples/blob/master/java-spring-security/src/main/java/io/pivotal/metric_registrar/examples/spring_security/ExampleController.java)
on GitHub.


## <a id='push'></a> Push the Sample App

To push the `java-spring-security` app:

1. In a terminal window, clone the Git repository that contains the `java-spring-security` app by running:

    ```
    git clone git@github.com:pivotal-cf/metric-registrar-examples.git
    ```

1. Navigate to the `java-spring-security` app directory by running:

    ```
    cd metric-registrar-examples/java-spring-security
    ```

1. Build the `java-spring-security` app by running:

    ```
    ./gradlew build
    ```

1. Push the `java-spring-security` app with a random route by running:

    ```
    cf push --random-route
    ```
    The above command returns output similar to the following example:
    <pre class="terminal">
    Waiting for app to start...
    Uploaded droplet (60.5M)
    Uploading complete
    Cell 333e7fdf-806e-424d-b3a0-78967ecb6d28 stopping instance 6f345835-8beb-48a5-b578-921f5de442c6

    name:              tutorial-example
    requested state:   started
    routes:            tutorial-example-random-route.cfapps.io
    last uploaded:     Wed 28 Aug 11:02:33 PDT 2019
    </pre>

1. From the `routes` section of the terminal output, record the URL of the `java-spring-security` app. In the example output in the previous step, this URL is
`tutorial-example-random-route.cfapps.io`.

1. In a browser window, navigate to the URL you recorded in the previous step. The following screenshot shows the UI of the `java-spring-security` app:
    <img src="images/sample-app-ui.png" alt="The text following the image describes the details of the UI." width="450px">
    <br>
    The `java-spring-security` app UI includes the following buttons:
    * **Increment Custom gauge:** Causes the `custom` metric to increase by a value of `1`. You use this button in [Trigger Scaling](#trigger) below.
    * **Decrement custom gauge:** Causes the `custom` metric to decrease by a value of `1`.
    * **See the metrics:** Opens `/actuator/prometheus` in your browser. The Metric Registrar uses this page to collect metrics. You can use this page to view
    the values of the `custom` metric and all metrics from the Micrometer Prometheus library.
    * **Increment Simple counter** and **Call an endpoint with high latency:** These buttons are not used in this tutorial. To learn more about the functions
    of these buttons, see [java-spring-security](https://github.com/pivotal-cf/metric-registrar-examples/tree/master/java-spring-security) on GitHub.


## <a id='register-endpoint'></a> Register a Custom Metrics Endpoint

In order for an app to emit custom metrics, you must first register the app as a metric source with the Metric Registrar.

To register a custom metrics endpoint for the `java-spring-security` app:

1. Install the Metric Registrar CLI by running:

    ```
    cf install-plugin -r CF-Community "metric-registrar"
    ```

1. Register the metrics endpoint of the `java-spring-security` app by running:

    ```
    cf register-metrics-endpoint java-spring-security /actuator/prometheus --insecure
    ```
    Because the app dependencies include the Micrometer Prometheus library, there is automatically a metrics endpoint at `/actuator/prometheus`.
    <p class='note warning'><strong>Warning:</strong> When you include the <code>--insecure</code> flag in the above command, the Metric Registrar scrapes the
      metrics endpoint on the default app port. Exposing metrics on the default app port makes the metrics available to anyone with access to the app. VMware
      strongly recommends that you do not use the <code>--insecure</code> flag in a production environment. Instead, specify an alternative port by including
      the <code>--internal-port</code> flag. Specifying an alternative port the <code>--internal-port</code> flag exposes the metrics endpoint on that port
      and limits access to the app.</p>

1. Install the Log Cache CLI by running:

    ```
    cf install-plugin -r CF-Community "log-cache"
    ```
    Log Cache is a component of <%= vars.app_runtime_abbr %> that allows you to filter and query app logs.

1. View the app metrics as they are emitted by running:

    ```
    cf tail java-spring-security --envelope-class metrics --follow
    ```
    When you include the `--follow` flag in the above command, the return output is appended to metrics as they are emitted, similar to the following example:
    <pre class="terminal">
    Retrieving logs for app tutorial-example in org sandbox / space development as example@user...

    2019-08-28T09:17:56.28-0700 [tutorial-example/1] GAUGE cpu:0.289158 percentage disk:135716864.000000 bytes disk_quota:1073741824.000000 bytes memory:399979315.000000 bytes memory_quota:2147483648.000000 bytes
    2019-08-28T09:17:56.50-0700 [tutorial-example/0] GAUGE custom:1.000000
    </pre>
    <div class='note'><strong>Notes:</strong>
      <ul>
        <li>In the <code>java-spring-security</code> app UI, you must click <strong>Increment Custom gauge</strong> at least one time to cause the app to emit
          the <code>custom</code> metric.</li>
        <li>If you do not see output similar to the above example, the Metric Registrar might not exist in your <%= vars.app_runtime_abbr %> deployment. To
          determine this, consult the operator of your <%= vars.app_runtime_abbr %> deployment.</li>
      </ul>
    </div>


## <a id='create-rule'></a> Create an Autoscaling Rule

Autoscaler is integrated with Apps Manager. You can create autoscaling rules in Apps Manager.

To create an autoscaling rule for the `java-spring-security` app that uses the `custom` metric as its scaling metric:

1. Log in to Apps Manager.<% if not vars.platform_code == 'OFFLINE' %> For more information, see [Logging In to Apps
Manager](../../operating/console-login.html).<% end %>

1. In Apps Manager, navigate to the `java-spring-security` app overview. For more information, see [View App Overview](../../console/manage-apps.html#view) in
_Managing Apps and Service Instances Using Apps Manager_.

1. Click **Autoscaling Disabled**.

1. Click **Enable Autoscaling**. The **Manage Autoscaling** window appears.

1. Under **Instance Limits**, configure upper and lower scaling limits for the `java-spring-security` app:
    1. For **Minimum**, enter `1`.
    1. For **Maximum**, enter `5`.
    1. Click **Apply Changes**.

1. To create an autoscaling rule:
    1. Next to **Scaling Rules**, click **Edit**. The **Edit Scaling Rules** window appears.
    1. Click **Add rule**. The **Select type** dropdown appears.
    1. From the **Select type** dropdown, select **Custom**. More configuration fields appear below.
    1. For **Scale down if less than**, enter `2`. If the average value of the `custom` metric falls below this number, Autoscaler scales the number of app
    instances down.
    1. For **Scale up if more than**, enter `5`. If the average value of the `custom` metric rises above this number, Autoscaler scales the number of app
    instances up.
    1. For **Metric**, enter `custom`.
    1. Click **Save**.


## <a id='trigger'></a> Trigger Scaling

Now that you have pushed the `java-spring-security` app, configured the app to emits the `custom` metric, and configured Autoscaler to scale the number of app
instances up or down using the `custom` metric as its scaling metric, you can trigger a scaling action. Autoscaler scales the app when the `custom` metric
goes above the upper scaling limit or below the lower scaling limit that you configured in [Create an Autoscaling Rule](#create-rule) above.

To trigger a scaling action:

1. In a browser window, enter the URL of the `java-spring-security` app UI that you retrieved in [Push the Sample App](#push) above.

1. Click **Increment Custom gauge** enough times to bring the `custom `metric over the upper scaling limit of `5` that you configured in [Create an
Autoscaling Rule](#create-rule) above. You can verify the value of the `custom` metric by clicking **See the metrics**.

1. In Apps Manager, monitor the `java-spring-security` app overview for about two minutes. Autoscaler begins to scale the app up, creating one app instance at
a time until the number of instances reaches `5`.


## <a id='next-steps'></a> Next Steps

Now that you have completed this tutorial, you can create custom scaling metrics and autoscaling rules with your own app. For more information, review the
resources listed in [Overview](#overview) above. After you have configured your app to emit custom metrics, you can follow the steps outlined in this tutorial
to scale based on those metrics.
